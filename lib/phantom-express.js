// Generated by CoffeeScript 1.7.1
(function() {
  var child_process, middleware, redis, _;

  _ = require('lodash');

  child_process = require('child_process');

  redis = require('redis');

  module.exports = middleware = function(options) {
    options = _.assign({
      cacheLifetime: 600,
      store: null,
      hashPrepend: ''
    }, options);
    return function(req, res, next) {
      var cacheName, fragment, fullUrl, processDo, queryParams, url;
      if (!_.has(req.query, '_escaped_fragment_')) {
        return next();
      }
      url = req.url.split('?')[0];
      queryParams = _.clone(req.query);
      fragment = "#" + options.hashPrepend + queryParams['_escaped_fragment_'];
      delete queryParams['_escaped_fragment_'];
      queryParams = _.map(queryParams, function(item, key) {
        return "" + key + "=" + item;
      });
      queryParams = queryParams.length ? "?" + (queryParams.join('&')) : '';
      fullUrl = [req.protocol, '://', req.get('host'), url, queryParams, fragment].join('');
      processDo = function(cb) {
        return child_process.exec("phantomjs --load-images=no " + __dirname + "/render.js '" + fullUrl + "'", function(error, stdout, stderr) {
          if (error || stderr) {
            return res.send(500, error || stderr);
          } else {
            if (_.isFunction(cb)) {
              cb(stdout);
            }
            return res.send(200, stdout);
          }
        });
      };
      if (options.store && options.store.ready) {
        cacheName = 'phantom-' + fullUrl;
        return options.store.get(cacheName, function(err, result) {
          if (result) {
            return res.send(200, result);
          } else {
            return processDo(function(data) {
              options.store.set(cacheName, data);
              return options.store.expire(cacheName, options.cacheLifetime);
            });
          }
        });
      } else {
        return processDo();
      }
    };
  };

  middleware.middlewarePriority = -2;

}).call(this);
